#!/usr/bin/env python3
"""
Script to compare the timing results between parallel and sequential COVID-19 simulations.
It reads the JSON timing files generated by the simulations and produces comparison metrics.
"""

import os
import json
import glob
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime

def load_timing_data(file_path):
    """Load timing data from a JSON file"""
    with open(file_path, 'r') as f:
        return json.load(f)

def find_latest_files():
    """Find the latest parallel and sequential timing files"""
    parallel_files = glob.glob('./timing_results/parallel_*.json')
    sequential_files = glob.glob('./timing_results/sequential_*.json')
    
    latest_parallel = None
    latest_sequential = None
    
    if parallel_files:
        latest_parallel = max(parallel_files, key=os.path.getmtime)
    
    if sequential_files:
        latest_sequential = max(sequential_files, key=os.path.getmtime)
    
    return latest_parallel, latest_sequential

def compare_specific_files(parallel_file, sequential_file, output_dir="./timing_results"):
    """Compare specific parallel and sequential timing files"""
    if not parallel_file or not sequential_file:
        print("Error: One or both files are missing.")
        return
    
    parallel_data = load_timing_data(parallel_file)
    sequential_data = load_timing_data(sequential_file)
    
    # Create output directory if it doesn't exist
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"{output_dir}/comparison_{timestamp}.txt"
    
    with open(output_file, 'w') as f:
        f.write(f"=== COVID-19 Simulation Timing Comparison ===\n")
        f.write(f"Parallel file: {parallel_file}\n")
        f.write(f"Sequential file: {sequential_file}\n")
        f.write(f"Comparison generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        f.write("=== Overall Simulation Time ===\n")
        parallel_total = parallel_data["timings"].get("total_simulation", {}).get("total", 0)
        sequential_total = sequential_data["timings"].get("total_simulation", {}).get("total", 0)
        
        if parallel_total and sequential_total:
            speedup = sequential_total / parallel_total
            efficiency = speedup / int(os.environ.get('MPI_SIZE', '1'))  # Assuming MPI_SIZE env var
            
            f.write(f"Parallel simulation: {parallel_total:.4f} seconds\n")
            f.write(f"Sequential simulation: {sequential_total:.4f} seconds\n")
            f.write(f"Speedup: {speedup:.2f}x\n")
            f.write(f"Efficiency: {efficiency:.2f}\n\n")
        else:
            f.write("Couldn't find total simulation timing data in one or both files.\n\n")
        
        f.write("=== Day-by-Day Comparison ===\n")
        
        # Get all day keys from both files
        parallel_days = sorted([k for k in parallel_data["timings"] if k.startswith("day_")])
        sequential_days = sorted([k for k in sequential_data["timings"] if k.startswith("day_")])
        
        # Find common days
        common_days = sorted(list(set(parallel_days) & set(sequential_days)))
        
        if not common_days:
            f.write("No common day data found between the two simulations.\n")
        else:
            day_parallel = []
            day_sequential = []
            day_speedup = []
            
            for day in common_days:
                par_time = parallel_data["timings"][day]["total"]
                seq_time = sequential_data["timings"][day]["total"]
                speedup = seq_time / par_time if par_time > 0 else 0
                
                f.write(f"{day}: Parallel = {par_time:.4f}s, Sequential = {seq_time:.4f}s, Speedup = {speedup:.2f}x\n")
                
                day_parallel.append(par_time)
                day_sequential.append(seq_time)
                day_speedup.append(speedup)
            
            # Save data for plotting
            day_data = {
                'days': [int(day.split('_')[1]) for day in common_days],
                'parallel': day_parallel,
                'sequential': day_sequential,
                'speedup': day_speedup
            }
    
    print(f"Comparison saved to {output_file}")
    return day_data

def plot_comparison(day_data, output_dir="./timing_results"):
    """Plot comparison graphs"""
    if not day_data:
        return
        
    # Create output directory if it doesn't exist
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Time comparison plot
    plt.figure(figsize=(10, 6))
    plt.bar(np.array(day_data['days']) - 0.2, day_data['parallel'], width=0.4, label='Parallel', color='blue')
    plt.bar(np.array(day_data['days']) + 0.2, day_data['sequential'], width=0.4, label='Sequential', color='orange')
    plt.xlabel('Simulation Day')
    plt.ylabel('Time (seconds)')
    plt.title('Execution Time Comparison by Day')
    plt.legend()
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.savefig(f"{output_dir}/time_comparison_{timestamp}.png")
    plt.close()
    
    # Speedup plot
    plt.figure(figsize=(10, 6))
    plt.bar(day_data['days'], day_data['speedup'], color='green')
    plt.axhline(y=1.0, color='r', linestyle='-', alpha=0.5)
    plt.xlabel('Simulation Day')
    plt.ylabel('Speedup (Sequential/Parallel)')
    plt.title('Speedup by Day')
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.savefig(f"{output_dir}/speedup_comparison_{timestamp}.png")
    plt.close()
    
    print(f"Plots saved to {output_dir}")

def main():
    # First, check if specific files are provided as arguments
    import sys
    if len(sys.argv) == 3:
        parallel_file = sys.argv[1]
        sequential_file = sys.argv[2]
        if os.path.exists(parallel_file) and os.path.exists(sequential_file):
            day_data = compare_specific_files(parallel_file, sequential_file)
            plot_comparison(day_data)
            return
    
    # Otherwise, find the latest files
    parallel_file, sequential_file = find_latest_files()
    
    if not parallel_file or not sequential_file:
        print("Error: Could not find both parallel and sequential timing files.")
        print("Make sure to run both simulations first or provide the file paths as arguments.")
        print("Usage: python compare_timings.py [parallel_file] [sequential_file]")
        return
    
    day_data = compare_specific_files(parallel_file, sequential_file)
    plot_comparison(day_data)

if __name__ == "__main__":
    main()
